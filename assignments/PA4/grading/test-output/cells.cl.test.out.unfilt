start
install_basic_classes
Add basic classTable... 
End 
Now let's build inheritence graph
CellularAutomaton parent is IO
Main parent is Object
check ring ablout CellularAutomaton
check ring ablout Main
Now Lets install Method ...
Current Class:CellularAutomaton
Adding method : init
Adding method : print
Adding method : num_cells
Adding method : cell
Adding method : cell_left_neighbor
Adding method : cell_right_neighbor
Adding method : cell_at_next_evolution
Adding method : evolve
Current Class:IO
Adding method : out_string
Adding method : out_int
Adding method : in_string
Adding method : in_int
Current Class:String
Adding method : length
Adding method : concat
Adding method : substr
Current Class:Int
Current Class:Main
Adding method : main
Current Class:Object
Adding method : abort
Adding method : type_name
Adding method : copy
Current Class:Bool
Check Method type :CellularAutomaton
Check Method type :IO
Check Method type :String
Check Method type :Int
Check Method type :Main
Check Method type :Object
Check Method type :Bool
Adding attribute :population_map
Checking attribute: population_map:String
NO INIT
Checking attribute:population_map end
Checking method :init
Add map:String into Objecttable
testing... 
 Checking assign population_map
testing... end
Checking method :print
testing... 
checking dispatch type out_string
Dispatch: Class_type:SELF_TYPE,functionName:out_string,curr_class: CellularAutomaton
Find method name out_string:CellularAutomaton:CellularAutomaton
Find method name out_string:CellularAutomaton:IO
checking dispatch type concat
Dispatch: class = String
Find method name concat:String:String
check str:String
params type is String
formal_type is String
params type is String
formal_type is String
testing... end
Checking method :num_cells
testing... 
checking dispatch type length
Dispatch: class = String
Find method name length:String:String
testing... end
Checking method :cell
Add position:Int into Objecttable
testing... 
checking dispatch type substr
Dispatch: class = String
Find method name substr:String:String
params type is Int
formal_type is Int
params type is Int
formal_type is Int
testing... end
Checking method :cell_left_neighbor
Add position:Int into Objecttable
testing... 
Checking eq
checking dispatch type cell
Dispatch: Class_type:SELF_TYPE,functionName:cell,curr_class: CellularAutomaton
Find method name cell:CellularAutomaton:CellularAutomaton
checking dispatch type num_cells
Dispatch: Class_type:SELF_TYPE,functionName:num_cells,curr_class: CellularAutomaton
Find method name num_cells:CellularAutomaton:CellularAutomaton
params type is Int
formal_type is Int
checking dispatch type cell
Dispatch: Class_type:SELF_TYPE,functionName:cell,curr_class: CellularAutomaton
Find method name cell:CellularAutomaton:CellularAutomaton
params type is Int
formal_type is Int
free(): invalid pointer
  (core dumped)
